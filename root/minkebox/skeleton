{
  name: `Wireguard Server`,
  description: `Fast, Modern, Secure VPN Tunnel Server`,
  image: `registry.minkebox.net/minkebox/wireguardserver`,
  uuid: `5B605272-3D3D-4A97-8CA1-BCE9E7CC72F9`,
  tags: [ 'VPN', 'Security', 'Networking' ],
  actions: [
    {
      type: `Header`,
      title: `Network`,
      visible: `property.Advanced`
    },
    {
      type: `Text`,
      text: `Select which network this application will use. You probably want <b>home</b> unless this application is being used on a private network.`
    },
    {
      type: `SelectNetwork`,
      name: `primary`,
      description: `Select network`
    },
    {
      type: `EditEnvironment`,
      name: `SELECTED_PORT`,
      description: `Select the UDP port number for the VPN`,
      validate: `\\d*`,
      enabled: `property.FirstUse`,
      initValue: `{{__RANDOMPORTS(1)}}`
    },
    {
      type: `EditEnvironment`,
      name: `SELECTED_SERVER_NETWORK`,
      description: `Specify a /24 VPN network`,
      validate: `(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){2}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)`,
      enabled: `property.FirstUse`,
      initValue: `10.253.122`
    },
    {
      type: `Header`,
      title: `Clients`
    },
    {
      type: `Text`,
      text: `Add clients to the tables below. Each entry will be auto-populated with an ID (between 2 and 250) and a public/private keypair. You can edit these if you wish.  Selecting an entry will show the associated configuration as text and a QR code.`
    },
    {
      type: `EditFileAsTable`,
      name: `/etc/wireguard/clients.info`,
      description: `Clients`,
      headers: [
        { name: `Name` },
        { name: `ID`, validate: `\\d+` },
        { name: `Client Public Key` },
        { name: `Client Private Key` }
      ],
      pattern: `{{V[1]}}#{{V[2]}}`,
      controls: true,
      id: 'wgc'
    },
    {
      type: `EditEnvironmentAsCheckbox`,
      name: `INTERNET_ONLY`,
      description: `Clients can <b>only</b> access the Internet`,
      initValue: false
    },
    {
      type: `Header`,
      title: `Configuration`
    },
    {
      type: `ShowFile`,
      name: `/etc/wireguard/server.info`,
      description: ``,
      id: 'wgs'
    },
    {
      type: `Header`,
      title: `QR Code`
    },
    {
      type: `Text`,
      text: ``,
      id: `qrcode`
    },
    {
      type: `Help`,
      text: `Compatible Wireguard clients
<ul>
<li><a target="_blank" href="https://download.wireguard.com/windows-client/wireguard-amd64-0.0.38.msi">Windows</a></li>
<li><a target="_blank" href="https://itunes.apple.com/us/app/wireguard/id1451685025">Mac</a></li>
<li><a target="_blank" href="https://itunes.apple.com/us/app/wireguard/id1441195209">iPhone</a></li>
<li><a target="_blank" href="https://play.google.com/store/apps/details?id=com.wireguard.android">Android</a></li>
</ul>`
    },
    {
      type: `Text`,
      text: `<br/>UPnP is not available on your network. Please manually forward the VPN UDP port from your router to {{__HOMEIP}}{{__HOMEIP6 ? "and " + __HOMEIP6 : ""}}.`,
      visible: `!property.UPnPAvailable`
    },
    {
      type: `Script`,
      description: `Wireguard key generator (https://git.zx2c4.com/wireguard-tools/tree/contrib/keygen-html/wireguard.js)`,
      script: `function w(r){var n=new Float64Array(16);if(r)for(var o=0;o<r.length;++o)n[o]=r[o];return n}function l(r){for(var n=0;n<16;++n)r[(n+1)%16]+=(n<15?1:38)*Math.floor(r[n]/65536),r[n]&=65535}function A(r,n,o){for(var a,f=~(o-1),t=0;t<16;++t)a=f&(r[t]^n[t]),r[t]^=a,n[t]^=a}function p(r,n,o){for(var a=0;a<16;++a)r[a]=n[a]+o[a]|0}function d(r,n,o){for(var a=0;a<16;++a)r[a]=n[a]-o[a]|0}function g(r,n,o){for(var a=new Float64Array(31),f=0;f<16;++f)for(var t=0;t<16;++t)a[f+t]+=n[f]*o[t];for(f=0;f<15;++f)a[f]+=38*a[f+16];for(f=0;f<16;++f)r[f]=a[f];l(r),l(r)}function U(r){r[31]=127&r[31]|64,r[0]&=248}function n(r){for(var n,o=new Uint8Array(32),a=w([1]),f=w([9]),t=w(),i=w([1]),u=w(),e=w(),c=w([56129,1]),v=w([9]),y=0;y<32;++y)o[y]=r[y];U(o);for(y=254;0<=y;--y)A(a,f,n=o[y>>>3]>>>(7&y)&1),A(t,i,n),p(u,a,t),d(a,a,t),p(t,f,i),d(f,f,i),g(i,u,u),g(e,a,a),g(a,t,a),g(t,f,u),p(u,a,t),d(a,a,t),g(f,a,a),d(t,i,e),g(a,t,c),p(a,a,i),g(t,t,a),g(a,i,e),g(i,f,v),g(f,u,u),A(a,f,n),A(t,i,n);return function(r,n){for(var o=w(),a=0;a<16;++a)o[a]=n[a];for(a=253;0<=a;--a)g(o,o,o),2!==a&&4!==a&&g(o,o,n);for(a=0;a<16;++a)r[a]=o[a]}(t,t),g(a,a,t),function(r,n){for(var o,a=w(),f=w(),t=0;t<16;++t)f[t]=n[t];l(f),l(f),l(f);for(var i=0;i<2;++i){a[0]=f[0]-65517;for(t=1;t<15;++t)a[t]=f[t]-65535-(a[t-1]>>16&1),a[t-1]&=65535;a[15]=f[15]-32767-(a[14]>>16&1),o=a[15]>>16&1,a[14]&=65535,A(f,a,1-o)}for(t=0;t<16;++t)r[2*t]=255&f[t],r[2*t+1]=f[t]>>8}(o,a),o}function o(){var r,n=(r=new Uint8Array(32),window.crypto.getRandomValues(r),r);return U(n),n}function a(r,n){for(var o=Uint8Array.from([n[0]>>2&63,63&(n[0]<<4|n[1]>>4),63&(n[1]<<2|n[2]>>6),63&n[2]]),a=0;a<4;++a)r[a]=o[a]+65+(25-o[a]>>8&6)-(51-o[a]>>8&75)-(61-o[a]>>8&15)+(62-o[a]>>8&3)}function f(r){var n,o=new Uint8Array(44);for(n=0;n<32/3;++n)a(o.subarray(4*n),r.subarray(3*n));return a(o.subarray(4*n),Uint8Array.from([r[3*n+0],r[3*n+1],0])),o[43]=61,String.fromCharCode.apply(null,o)}window.wireguard={generateKeypair:function(){var r=o();return{publicKey:f(n(r)),privateKey:f(r)}}}`
    },
    {
      type: `Script`,
      include: `qrcode`
    },
    {
      type: `Script`,
      script: `
        const config = document.querySelector('#wgs .value');
        const text = config.innerText;
        config.innerText = '';
        const qrd = document.querySelector('#qrcode');
        function qr() {
          qrd.innerHTML = '<div style="margin-left:33%">' + new QRCode({ join: true, content: config.innerText }).svg() + '</div>';
        }
        document.querySelector('#wgc .pure-table').addEventListener('click', function(e) {
          let tr;
          for (tr = event.target; tr.nodeName !== 'TR'; tr = tr.parentElement)
            ;
          if (e.target.classList.contains('add')) {
            setTimeout(function() {
              let table;
              for (table = tr; table.nodeName !== 'TABLE'; table = table.parentElement)
                ;
              const keypair = wireguard.generateKeypair();
              table.querySelector('tr:last-child td:nth-of-type(3) input').value = keypair.publicKey;
              table.querySelector('tr:last-child td:nth-of-type(4) input').value = keypair.privateKey;
              const ids = table.querySelectorAll('tr td:nth-of-type(2) input');
              const sids = {};
              for (let i = 0; i < ids.length; i++) {
                sids[ids[i].value] = true;
              }
              let id;
              for (id = 2; id < 250 && sids[id]; id++)
                ;
              table.querySelector('tr:last-child td:nth-of-type(2) input').value = id;
              config.innerText = text.replace('#ID#', id).replace('## Client private key on your device ##', keypair.privateKey);
              table.dispatchEvent(new Event('input'));
              qr();
            }, 0);
          }
          else if (e.target.classList.contains('remove')) {
            config.innerText = '';
            qrd.innerHTML = '';
          }
          else {
            const privateKey = tr.querySelector('td:nth-of-type(4) input').value;
            const id = tr.querySelector('td:nth-of-type(2) input').value;
            config.innerText = text.replace('#ID#', id).replace('## Client private key on your device ##', privateKey);
            qr();
          }
        });
        document.querySelector('#wgc .pure-table').addEventListener('input', function(e) {
          let tr;
          for (tr = event.target; tr && tr.nodeName !== 'TR'; tr = tr.parentElement)
            ;
          if (tr) {
            const privateKey = tr.querySelector('td:nth-of-type(4) input').value;
            const id = tr.querySelector('td:nth-of-type(2) input').value;
            config.innerText = text.replace('#ID#', id).replace('## Client private key on your device ##', privateKey);
            qr();
          }
        });
      `
    }
  ],
  properties: [
    {
      type: `Feature`,
      name: `privileged`
    },
    {
      type: `Feature`,
      name: `ddns`
    },
    {
      type: `Environment`,
      name: `SELECTED_PORT`
    },
    {
      type: `Environment`,
      name: `SELECTED_SERVER_NETWORK`
    },
    {
      type: `Environment`,
      name: `INTERNET_ONLY`
    },
    {
      type: `Directory`,
      name: `/etc/wireguard`,
      style: `boot`,
      backup: true
    },
    {
      type: `File`,
      name: `/etc/wireguard/clients.info`
    },
    {
      type: `File`,
      name: `/etc/wireguard/server.info`
    },
    {
      type: `Port`,
      name: `SELECTED_PORT`,
      port: `{{SELECTED_PORT}}`,
      protocol: `UDP`,
      nat: true
    },
    {
      type: `Network`,
      name: `primary`,
      value: `home`
    },
    {
      type: `Network`,
      name: `secondary`,
      value: `home`
    }
  ],
  monitor: {
    cmd: `echo $(iptables -L RX -x -v -n | awk 'NR == 3 {print $2}') $(iptables -L TX -x -v -n | awk 'NR == 3 {print $2}')`,
    target: `helper`,
    init: `
      <div style="min-width: 400px; height: 250px">
        <canvas style="position: absolute" id="{{ID}}"></canvas>
      </div>
      <script>
         networkTrafficGraph({ id: "{{ID}}" });
      </script>
    `
  }
}
