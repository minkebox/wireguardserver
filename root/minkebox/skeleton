{
  name: `Wireguard`,
  description: `Super simple VPN to connect to your home network`,
  image: `registry.minkebox.net/minkebox/wireguard`,
  tags: [ 'VPN', 'Security', 'Networking' ],
  actions: [
    {
      type: `Header`,
      title: `Network`,
      visible: `property.Advanced`
    },
    {
      type: `Text`,
      text: `Select which network this application will use. You probably want <b>home</b> unless this application is being used on a private network.`
    },
    {
      type: `SelectNetwork`,
      name: `primary`,
      description: `Select network`
    },
    {
      type: `Header`,
      title: `Configuration`
    },
    {
      type: `EditEnvironment`,
      name: `SELECTED_PORT`,
      description: `Select the UDP port number for the VPN, or leave blank to auto-assign`,
      validate: `\\d*`,
      visible: `property.Advanced`,
      enabled: `property.FirstUse`
    },
    {
      type: `EditFileAsTable`,
      name: `/etc/wireguard/clients.info`,
      description: `Clients`,
      headers: [
        { name: `Name`, `Public Key` }
      ],
      pattern: `{{1}}`,
      controls: true
    },
    {
      type: `ShowFile`,
      name: `/etc/wireguard/server.info`,
      description: `Server information`
    },
    {
      type: `Help`,
      text: `Compatible Wireguard clients
<ul>
<li><a target="_blank" href="https://download.wireguard.com/windows-client/wireguard-amd64-0.0.38.msi">Windows</a></li>
<li><a target="_blank" href="https://itunes.apple.com/us/app/wireguard/id1451685025">Mac</a></li>
<li><a target="_blank" href="https://itunes.apple.com/us/app/wireguard/id1441195209">iPhone</a></li>
<li><a target="_blank" href="https://play.google.com/store/apps/details?id=com.wireguard.android">Android</a></li>
</ul>`
    },
    {
      type: `Text`,
      text: `<br/>UPnP is not available on your network. Please manually forward the VPN UDP port (listed at the top of the configuration file) from your router to {{__HOMEADDRESSES}}.`,
      visible: `!property.UPnPAvailable`
    }
  ],
  properties: [
    {
      type: `Feature`,
      name: `privileged`
    },
    {
      type: `Feature`,
      name: `vpn`
    },
    {
      type: `Feature`,
      name: `ddns`
    },
    {
      type: `Environment`,
      name: `SELECTED_PORT`
    },
    {
      type: `Directory`,
      name: `/etc/wireguard`,
      style: `boot`,
      backup: true
    },
    {
      type: `File`,
      name: `/etc/wireguard/clients.info`
    },
    {
      type: `File`,
      name: `/etc/wireguard/server.info`
    },
    {
      type: `Network`,
      name: `primary`,
      defaultValue: `home`
    },
    {
      type: `Network`,
      name: `secondary`,
      defaultValue: `home`
    }
  ],
  monitor: {
    cmd: `echo $(ifconfig wg0 | grep "RX bytes" | tr '\\n' ' ' | sed "s/^.*RX bytes:\\([0-9]*\\).*TX bytes:\\([0-9]*\\).*$/\\1 \\2/") $(ifconfig tap0 | grep "RX bytes" | tr '\\n' ' ' | sed "s/^.*RX bytes:\\([0-9]*\\).*TX bytes:\\([0-9]*\\).*$/\\1 \\2/")`,
    polling: 1,
    parser: `
      const rxtx = input.split(' ');
      if (rxtx.length == 4) {
        const now = Date.now() / 1000;
        rxtx[0] = parseInt(rxtx[0]) + parseInt(rxtx[2]);
        rxtx[1] = parseInt(rxtx[1]) + parseInt(rxtx[3]);
        if (!state) {
          state = {
            rx: [ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ],
            tx: [ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ],
            last: rxtx,
            then: now - 1
          };
        }
        let elapse = Math.min(state.rx.length, Math.floor(now - state.then));
        if (elapse > 5) {
          for (; elapse > 0; elapse--) {
            state.rx.shift();
            state.tx.shift();
            state.rx.push(0);
            state.tx.push(0);
          }
        }
        state.rx.shift();
        state.tx.shift();
        state.rx.push((rxtx[0] - state.last[0]) * 8 / 1000000 / (now - state.then));
        state.tx.push((rxtx[1] - state.last[1]) * 8 / 1000000 / (now - state.then));
        output.rx = state.rx.slice(-1)[0].toFixed(1);
        output.tx = state.tx.slice(-1)[0].toFixed(1);
        state.last = rxtx;
        state.then = now;
      }
      output.graph = {
        traffic: {
          type: 'line',
          data: {
            labels: [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],
            datasets: [
              { label: 'RX', data: state.rx, borderColor: '#88cce7', backgroundColor: '#88cce7', fill: false, pointRadius: 0 },
              { label: 'TX', data: state.tx, borderColor: '#41b376', backgroundColor: '#41b376', fill: false, pointRadius: 0 }
            ]
          },
          options: {
            animation: { duration: 0 },
            maintainAspectRatio: false,
            adaptive: true,
            title: { display: true, text: 'Bandwidth (Mb/s)' },
            scales: {
              xAxes: [{
                display: false
              }],
              yAxes: [{
                ticks: { beginAtZero: true }
              }]
            }
          }
        }
      };
    `,
    minwidth: '400px',
    template: `{{{graph.traffic}}}`
  }
}
